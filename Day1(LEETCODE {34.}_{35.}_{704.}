35. Search Insert Position

class Solution {
public:
    int searchInsert(vector<int>& arr, int key) {
        
        int n = arr.size();
        int start=0,end=n-1,mid;

        while(start<=end)
        {
            //find mid 
            mid = start + (end- start)/2;

            if(arr[mid]==key)
            {
            return mid;
            }

            // arr[mid]<key
            else if(arr[mid]<key) {
            start =mid+1;
            }

            //arr[mid]>key
            else
            {
            end=mid-1;
             }
          }
            return start; // 
    }
};


34. Find First and Last Position of Element in Sorted Array

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
        int start=0, end = nums.size()-1, first=-1,last=-1, mid;

        //Find First
        while(start<=end) 
        {
            mid = start + (end-start)/2;
            // 
            if(nums[mid]==target)
            {
                first = mid;
                end = mid-1;
            }
            else if(nums[mid]<target)
            start = mid+1;
            else
            end = mid-1;
            }

            //Find last
            start=0,end = nums.size()-1;
             while(start<=end) 
            {
            mid = start + (end-start)/2;
            // 
            if(nums[mid]==target)
            {
                last = mid;
                start = mid+1;
            }
            else if(nums[mid]<target)
            start = mid+1;
            else
            end = mid-1;
            }

        vector<int>a(2);
        a[0]=first;
        a[1]=last;

        return a;
    }
};



"704. Binary Search"

class Solution {
public:
    int search(vector<int>& arr, int key) {
 
 int n = arr.size();
 int start = 0,end = n-1,mid;
 {
    while(start<=end)
    {
    // Mid ko find karo
    mid = start + (end-start)/2; //mid = (start+end)/2; Because overflow
   
    //arr[mid]==key
    if(arr[mid]==key)
    return mid;

     
     //arr[mid]<key
     else if(arr[mid]<key)
     start = mid +1;

     //arr[mid]>key
     else
     end = mid-1;
     }
     return -1;
     }  
    }
};
